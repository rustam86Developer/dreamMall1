'use strict';
module.exports = (sequelize, DataTypes) => {
  const IsvTempRegistration = sequelize.define('IsvTempRegistration', {
    token: DataTypes.STRING,
    partnerId: DataTypes.INTEGER,
    personalFirstName: DataTypes.STRING,
    personalLastName: DataTypes.STRING,
    personalTitle: DataTypes.STRING,
    personalPhoneNumber: DataTypes.STRING,
    personalMobileNumber: DataTypes.STRING,
    personalEmail: DataTypes.STRING,
    personalNmls: DataTypes.STRING,
    personalAddress1: DataTypes.STRING,
    personalAddress2: DataTypes.STRING,
    personalState: DataTypes.STRING,
    personalCity: DataTypes.STRING,
    personalZipCode: DataTypes.STRING,
    mainPocFirstName: DataTypes.STRING,
    mainPocLastName: DataTypes.STRING,
    mainPocTitle: DataTypes.STRING,
    mainPocPhoneNumber: DataTypes.STRING,
    mainPocMobileNumber: DataTypes.STRING,
    mainPocEmail: DataTypes.STRING,
    mainPocNmls: DataTypes.STRING,
    mainPocAddress1: DataTypes.STRING,
    mainPocAddress2: DataTypes.STRING,
    mainPocState: DataTypes.STRING,
    mainPocCity: DataTypes.STRING,
    mainPocZipCode: DataTypes.STRING,
    clientLegalName: DataTypes.STRING,
    clientDbaName: DataTypes.STRING,
    clientFederalTaxId: DataTypes.STRING,
    clientBusinessClassification: DataTypes.STRING,
    clientLocationType: DataTypes.STRING,
    clientPhoneNumber: DataTypes.STRING,
    clientWebsite: DataTypes.STRING,
    clientEmail: DataTypes.STRING,
    clientFax: DataTypes.STRING,
    clientNmls: DataTypes.STRING,
    clientType: DataTypes.STRING,
    clientTypeName: DataTypes.STRING,
    clientYearsOld: DataTypes.STRING,
    clientAddress1: DataTypes.STRING,
    clientAddress2: DataTypes.STRING,
    clientState: DataTypes.STRING,
    clientCity: DataTypes.STRING,
    clientZipCode: DataTypes.STRING,
    loCount: DataTypes.STRING,
    loansUnderManagement: DataTypes.STRING,
    billingFirstName: DataTypes.STRING,
    billingLastName: DataTypes.STRING,
    billingEmail: DataTypes.STRING,
    billingPhoneNumber: DataTypes.STRING,
    billingAddressLine1: DataTypes.STRING,
    billingAddressLine2: DataTypes.STRING,
    billingState: DataTypes.STRING,
    billingCity: DataTypes.STRING,
    billingZipCode: DataTypes.STRING
  }, {});
  IsvTempRegistration.associate = function(models) {
    // associations can be defined here
    IsvTempRegistration.belongsTo(models.Partner);
  };
  return IsvTempRegistration;
};